name: mongomigrations.core

on: push

env:
  MONGODB_VERSION: 4.4.6
  GITVERSION_VERSION: 5.6.9
  DOTNET_SDK_VERSION: 5.0.300
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1 

jobs:

  setup:    
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      BUILD_VERSION: ${{ steps.set-version.outputs.BUILD_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      
      - name: Add dotnet tools to environment path
        shell: pwsh
        run: echo "${HOME}/.dotnet/tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - id: set-version
        name: Setup GitVersion and set build version
        shell: pwsh
        run: |
          dotnet tool update GitVersion.Tool --global --version ${{ env.GITVERSION_VERSION }}
          $BUILD_VERSION = (dotnet gitversion /showVariable NugetVersionv2) | out-string
          echo "BUILD_VERSION=$BUILD_VERSION" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "::set-output name=BUILD_VERSION::$BUILD_VERSION"
          
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    needs: [setup]
    env:
      BUILD_VERSION: ${{ needs.setup.outputs.BUILD_VERSION }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    steps:      
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      
      - if: matrix.os == 'windows-latest'
        name: Setup mongodb v${{ env.MONGODB_VERSION }}
        shell: pwsh
        env:
          MONGODB_SERVER_FILENAME: mongodb-windows-x86_64-${{ env.MONGODB_VERSION }}-signed.msi
        run: |
          mkdir -p software/mongodb | Out-Null
          Start-BitsTransfer https://fastdl.mongodb.org/windows/${{ env.MONGODB_SERVER_FILENAME }} ./software/mongodb/${{ env.MONGODB_SERVER_FILENAME }}
          $ArgumentList = @(
            'ADDLOCAL="ServerService"'
            'SHOULD_INSTALL_COMPASS="0"'
            'MONGO_DATA_PATH="${{ github.workspace }}\software\mongodb\data"'
            'MONGO_LOG_PATH="${{ github.workspace }}\software\mongodb\logs"'
            'INSTALLLOCATION="${{ github.workspace }}\software\mongodb\server"'
            '/qn /norestart'
          ) -Join " ";
          Start-Process ./software/mongodb/${{ env.MONGODB_SERVER_FILENAME }} -Wait -ArgumentList "$ArgumentList"
          
      - if: matrix.os == 'ubuntu-latest'
        name: Setup mongodb v${{ env.MONGODB_VERSION }}
        uses: supercharge/mongodb-github-action@1.6.0
        with:
          mongodb-version: ${{ env.MONGODB_VERSION }}
                                    
      - name: Setup dotnet ${{ env.DOTNET_SDK_VERSION }}
        uses: actions/setup-dotnet@v1.8.0
        with:
          dotnet-version: '${{ env.DOTNET_SDK_VERSION }}'
                
      - name: Build & Run Tests
        shell: pwsh
        timeout-minutes: 10
        run: |
          pwsh -c ".\${{ env.GITHUB_WORKSPACE }}\build.ps1" -Version ${{ env.BUILD_VERSION }} -RunTests -Nupkg
          echo "${{ env.BUILD_VERSION }}" | Out-File ".\${{ env.GITHUB_WORKSPACE }}\nupkgs\nupkg_version.txt"

      - name: Upload nupkg
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: nupkgs-${{ matrix.os }}
          path: ${{ github.workspace }}/nupkgs/**/*
        
  publish:
     if: success()
     runs-on: ubuntu-latest
     name: Publish nuget package
     needs: [build]
     steps:

      - name: Download nupkgs
        uses: actions/download-artifact@v2
        with:
          name: nupkgs-windows-latest
          path: ${{ github.workspace }}/nupkgs
          
      - name: Push nuget packages
        if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master' 
        shell: pwsh
        run: | 
          $nupkg_version = Get-Content ".\${{ env.GITHUB_WORKSPACE }}\nupkgs\nupkg_version.txt"
          echo "NUPKG_VERSION=$nupkg_version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                            
          $nupkgs = Get-ChildItem ".\${{ env.GITHUB_WORKSPACE }}\nupkgs" -Filter *.nupkg | Select-Object -ExpandProperty FullName          
          $nupkgs | ForEach-Object {
            dotnet nuget push $_ --source nuget.org --api-key ${{ secrets.NUGET_THIS_REPO_API_KEY }}  
            if($LASTEXITCODE -ne 0) {
               Write-Error "Error uploading nupkg: $_. Exit code: $LASTEXITCODE"
            }
          }          

      - name: Create github release tag
        if: success() && github.ref == 'refs/heads/master'
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NUPKG_VERSION }}
          release_name: Release v${{ env.NUPKG_VERSION }}
          draft: true
          prerelease: false
